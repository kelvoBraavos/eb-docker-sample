name: Deploy (development) to AWS Elastic Beanstalk via AWS CLI

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      EB_APP_NAME: Docker-app
      EB_ENV_NAME: Docker-app-env
      VERSION_LABEL: node-${{ github.sha }}
      S3_BUCKET: elasticbeanstalk-us-east-1-076055903153
      BUNDLE_NAME: bundle.zip
      COMMIT_SHA: ${{ github.sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Bundle project for EB deployment
        run: |
          BUNDLE_NAME="${BUNDLE_NAME:-bundle.zip}"

          if [ -f "$BUNDLE_NAME" ]; then
            echo "üßπ Removing existing $BUNDLE_NAME..."
            rm "$BUNDLE_NAME"
          fi
          echo "Creating deployment bundle..."
          if zip -r "$BUNDLE_NAME" . "${ZIP_EXCLUDES[@]}"; then
            echo "‚úÖ Project bundled successfully into $BUNDLE_NAME"
          else
            echo "‚ùå Failed to bundle the project"
            exit 1
          fi

      - name: Verify and upload to S3
        run: |
          echo "Verifying that ${BUNDLE_NAME} exists..."
          if [ ! -f "${BUNDLE_NAME}" ]; then
            echo "‚ùå Error: ${BUNDLE_NAME} not found. Exiting."
            exit 1
          fi
          echo "‚úÖ ${BUNDLE_NAME} found. Uploading to S3..."
          aws s3 cp "${BUNDLE_NAME}" "s3://${S3_BUCKET}/api-docker-bundle-${VERSION_LABEL}.zip"

      - name: Ensure environment is Ready
        run: |
          echo "Waiting for environment to be Ready..."
          aws elasticbeanstalk wait environment-updated --environment-names "${EB_ENV_NAME}"
          STATUS=$(aws elasticbeanstalk describe-environments --environment-names "${EB_ENV_NAME}" --query "Environments[0].Status" --output text)
          HEALTH=$(aws elasticbeanstalk describe-environments --environment-names "${EB_ENV_NAME}" --query "Environments[0].Health" --output text)
          CUR=$(aws elasticbeanstalk describe-environments --environment-names "${EB_ENV_NAME}" --query "Environments[0].VersionLabel" --output text)
          echo "Status: $STATUS  Health: $HEALTH  CurrentVersion: $CUR"

      - name: Skip if env already on this version
        run: |
          CUR=$(aws elasticbeanstalk describe-environments \
            --environment-names "${EB_ENV_NAME}" \
            --query "Environments[0].VersionLabel" --output text)
          echo "Current env version: $CUR"
          if [ "$CUR" = "${VERSION_LABEL}" ]; then
            echo "Environment already on ${VERSION_LABEL}; nothing to do."
            exit 0
          fi

      - name: Create new EB application version
        run: |
          echo "Creating new EB application version..."
          aws elasticbeanstalk create-application-version \
            --application-name "${EB_APP_NAME}" \
            --version-label "${VERSION_LABEL}" \
            --description "${COMMIT_SHA}" \
            --source-bundle S3Bucket=${S3_BUCKET},S3Key=api-docker-bundle-${VERSION_LABEL}.zip \
            --process

      - name: Wait until app version is processed
        run: |
          set -e
          for i in {1..30}; do
            STATUS=$(aws elasticbeanstalk describe-application-versions \
              --application-name "${EB_APP_NAME}" \
              --version-labels "${VERSION_LABEL}" \
              --query "ApplicationVersions[0].Status" --output text)
            echo "AppVersion status: $STATUS"
            if [ "$STATUS" = "PROCESSED" ]; then exit 0; fi
            if [ "$STATUS" = "FAILED" ]; then exit 1; fi
            sleep 5
          done
          echo "‚ùå Timed out waiting for app version to process"
          exit 1

      - name: Deploy application version to EB environment
        run: |
          echo "Deploying ${VERSION_LABEL} to ${EB_ENV_NAME}..."
          aws elasticbeanstalk update-environment \
            --environment-name "${EB_ENV_NAME}" \
            --version-label "${VERSION_LABEL}"
